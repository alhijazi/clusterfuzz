# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from clusterfuzz._internal.protos import swarming_pb2 as clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class BotsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBot = channel.unary_unary(
                '/swarming.v2.Bots/GetBot',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotInfo.FromString,
                )
        self.DeleteBot = channel.unary_unary(
                '/swarming.v2.Bots/DeleteBot',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.DeleteResponse.FromString,
                )
        self.ListBotEvents = channel.unary_unary(
                '/swarming.v2.Bots/ListBotEvents',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotEventsRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotEventsResponse.FromString,
                )
        self.TerminateBot = channel.unary_unary(
                '/swarming.v2.Bots/TerminateBot',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TerminateRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TerminateResponse.FromString,
                )
        self.ListBotTasks = channel.unary_unary(
                '/swarming.v2.Bots/ListBotTasks',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotTasksRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskListResponse.FromString,
                )
        self.ListBots = channel.unary_unary(
                '/swarming.v2.Bots/ListBots',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotsRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotInfoListResponse.FromString,
                )
        self.CountBots = channel.unary_unary(
                '/swarming.v2.Bots/CountBots',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotsCountRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotsCount.FromString,
                )
        self.GetBotDimensions = channel.unary_unary(
                '/swarming.v2.Bots/GetBotDimensions',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotsDimensionsRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotsDimensions.FromString,
                )


class BotsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetBot(self, request, context):
        """GetBot returns information on a single bot
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBot(self, request, context):
        """DeleteBot makes Swarming forget about a single bot.

        This includes the event history, task history and current state (dimensions,
        cache state, etc). Once deleted, Swarming will not send tasks to this bot.
        A still running bot will fininsh executing its task and then not have any
        further tasks queued on it.

        For non-GCE-Provider bots, this does not remove any data on the bot
        machine itself, and if the bot is still running on that machine, it will
        likely show up again in swarming shortly after calling this API.

        If this bot is managed with GCE Provider, the underlying VM will be recycled
        and all data on that VM will be lost.

        If you wish to shut the bot down, call TerminateBot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBotEvents(self, request, context):
        """ListBotEvents returns a section of the Events (limited in quantity, time range)
        related to a single Bot.

        The bot in question must still be 'known' to Swarming.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TerminateBot(self, request, context):
        """TerminateBot asks a bot to terminate itself gracefully.
        The bot will stay in the DB, use 'delete' to remove it from the DB
        afterward. This request returns a pseudo-taskid that can be waited for to
        wait for the bot to turn down.
        This command is particularly useful when a privileged user needs to safely
        debug a machine specific issue. The user can trigger a terminate for one of
        the bot exhibiting the issue, wait for the pseudo-task to run then access
        the machine with the guarantee that the bot is not running anymore.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBotTasks(self, request, context):
        """ListBotTasks returns a section of the Task history (limited in quantity, time
        range) in the context of a single bot.

        The bot in question must still be 'known' to Swarming.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBots(self, request, context):
        """ListBots returns the state of a filtered (dimensions, state) list of known bots.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountBots(self, request, context):
        """CountBots returns the number of bots which match given set of filters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBotDimensions(self, request, context):
        """GetBotDimensions returns a list of known dimensions/values for bots currently
        connected to a given pool.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BotsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBot': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBot,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotInfo.SerializeToString,
            ),
            'DeleteBot': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteBot,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.DeleteResponse.SerializeToString,
            ),
            'ListBotEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBotEvents,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotEventsRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotEventsResponse.SerializeToString,
            ),
            'TerminateBot': grpc.unary_unary_rpc_method_handler(
                    servicer.TerminateBot,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TerminateRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TerminateResponse.SerializeToString,
            ),
            'ListBotTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBotTasks,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotTasksRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskListResponse.SerializeToString,
            ),
            'ListBots': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBots,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotsRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotInfoListResponse.SerializeToString,
            ),
            'CountBots': grpc.unary_unary_rpc_method_handler(
                    servicer.CountBots,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotsCountRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotsCount.SerializeToString,
            ),
            'GetBotDimensions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBotDimensions,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotsDimensionsRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotsDimensions.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'swarming.v2.Bots', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Bots(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Bots/GetBot',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Bots/DeleteBot',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.DeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBotEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Bots/ListBotEvents',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotEventsRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotEventsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TerminateBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Bots/TerminateBot',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TerminateRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TerminateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBotTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Bots/ListBotTasks',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotTasksRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBots(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Bots/ListBots',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotsRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotInfoListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CountBots(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Bots/CountBots',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotsCountRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotsCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBotDimensions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Bots/GetBotDimensions',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotsDimensionsRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BotsDimensions.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TasksStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetResult = channel.unary_unary(
                '/swarming.v2.Tasks/GetResult',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskIdWithPerfRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskResultResponse.FromString,
                )
        self.BatchGetResult = channel.unary_unary(
                '/swarming.v2.Tasks/BatchGetResult',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BatchGetResultRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BatchGetResultResponse.FromString,
                )
        self.GetRequest = channel.unary_unary(
                '/swarming.v2.Tasks/GetRequest',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskIdRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskRequestResponse.FromString,
                )
        self.CancelTask = channel.unary_unary(
                '/swarming.v2.Tasks/CancelTask',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskCancelRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.CancelResponse.FromString,
                )
        self.GetStdout = channel.unary_unary(
                '/swarming.v2.Tasks/GetStdout',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskIdWithOffsetRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskOutputResponse.FromString,
                )
        self.NewTask = channel.unary_unary(
                '/swarming.v2.Tasks/NewTask',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.NewTaskRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskRequestMetadataResponse.FromString,
                )
        self.ListTasks = channel.unary_unary(
                '/swarming.v2.Tasks/ListTasks',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksWithPerfRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskListResponse.FromString,
                )
        self.ListTaskStates = channel.unary_unary(
                '/swarming.v2.Tasks/ListTaskStates',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskStatesRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskStates.FromString,
                )
        self.ListTaskRequests = channel.unary_unary(
                '/swarming.v2.Tasks/ListTaskRequests',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskRequestsResponse.FromString,
                )
        self.CancelTasks = channel.unary_unary(
                '/swarming.v2.Tasks/CancelTasks',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksCancelRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksCancelResponse.FromString,
                )
        self.CountTasks = channel.unary_unary(
                '/swarming.v2.Tasks/CountTasks',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksCountRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksCount.FromString,
                )


class TasksServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetResult(self, request, context):
        """GetResult reports the result of the task corresponding to a task ID.
        It can be a 'run' ID specifying a specific retry or a 'summary' ID hidding
        the fact that a task may have been retried transparently, when a bot reports
        BOT_DIED.
        A summary ID ends with '0', a run ID ends with '1' or '2'.

        TODO(vadimsh): Require the summary ID ending with '0'.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchGetResult(self, request, context):
        """BatchGetResult returns results of many tasks at once.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRequest(self, request, context):
        """GetRequest returns the task request corresponding to a task ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTask(self, request, context):
        """CancelTask cancels a task. If a bot was running the task, the bot will forcibly cancel the task.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStdout(self, request, context):
        """GetStdout returns the output of the task corresponding to a task ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewTask(self, request, context):
        """NewTask creates a new task.
        The task will be enqueued in the tasks list and will be executed at the
        earliest opportunity by a bot that has at least the dimensions as described
        in the task request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTasks(self, request, context):
        """ListTasks returns full task results based on the filters.
        This endpoint is significantly slower than 'count'. Use 'count' when
        possible. If you just want the state of tasks, use 'get_states'.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTaskStates(self, request, context):
        """ListTaskStates returns task state for a specific set of tasks."""
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTaskRequests(self, request, context):
        """GetTaskRequests returns the task request corresponding to a task ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTasks(self, request, context):
        """CancelTasks cancels a subset of pending tasks based on the tags.
        Cancellation happens asynchronously, so when this call returns,
        cancellations will not have completed yet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountTasks(self, request, context):
        """CountTasks returns the number of tasks in a given state."""
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TasksServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResult,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskIdWithPerfRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskResultResponse.SerializeToString,
            ),
            'BatchGetResult': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchGetResult,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BatchGetResultRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BatchGetResultResponse.SerializeToString,
            ),
            'GetRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRequest,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskIdRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskRequestResponse.SerializeToString,
            ),
            'CancelTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTask,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskCancelRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.CancelResponse.SerializeToString,
            ),
            'GetStdout': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStdout,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskIdWithOffsetRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskOutputResponse.SerializeToString,
            ),
            'NewTask': grpc.unary_unary_rpc_method_handler(
                    servicer.NewTask,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.NewTaskRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskRequestMetadataResponse.SerializeToString,
            ),
            'ListTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTasks,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksWithPerfRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskListResponse.SerializeToString,
            ),
            'ListTaskStates': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTaskStates,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskStatesRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskStates.SerializeToString,
            ),
            'ListTaskRequests': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTaskRequests,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskRequestsResponse.SerializeToString,
            ),
            'CancelTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTasks,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksCancelRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksCancelResponse.SerializeToString,
            ),
            'CountTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.CountTasks,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksCountRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksCount.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'swarming.v2.Tasks', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Tasks(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Tasks/GetResult',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskIdWithPerfRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchGetResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Tasks/BatchGetResult',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BatchGetResultRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BatchGetResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Tasks/GetRequest',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskIdRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Tasks/CancelTask',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskCancelRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.CancelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStdout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Tasks/GetStdout',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskIdWithOffsetRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskOutputResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Tasks/NewTask',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.NewTaskRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskRequestMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Tasks/ListTasks',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksWithPerfRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTaskStates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Tasks/ListTaskStates',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskStatesRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskStates.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTaskRequests(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Tasks/ListTaskRequests',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TaskRequestsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Tasks/CancelTasks',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksCancelRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksCancelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CountTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Tasks/CountTasks',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksCountRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.TasksCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SwarmingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDetails = channel.unary_unary(
                '/swarming.v2.Swarming/GetDetails',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.ServerDetails.FromString,
                )
        self.GetToken = channel.unary_unary(
                '/swarming.v2.Swarming/GetToken',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BootstrapToken.FromString,
                )
        self.GetPermissions = channel.unary_unary(
                '/swarming.v2.Swarming/GetPermissions',
                request_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.PermissionsRequest.SerializeToString,
                response_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.ClientPermissions.FromString,
                )


class SwarmingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDetails(self, request, context):
        """GetDetails returns public information about the Swarming instance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetToken(self, request, context):
        """GetToken returns a token to bootstrap a new bot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPermissions(self, request, context):
        """GetPermissions returns the caller's permissions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SwarmingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDetails,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.ServerDetails.SerializeToString,
            ),
            'GetToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetToken,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BootstrapToken.SerializeToString,
            ),
            'GetPermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPermissions,
                    request_deserializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.PermissionsRequest.FromString,
                    response_serializer=clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.ClientPermissions.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'swarming.v2.Swarming', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Swarming(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Swarming/GetDetails',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.ServerDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Swarming/GetToken',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.BootstrapToken.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/swarming.v2.Swarming/GetPermissions',
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.PermissionsRequest.SerializeToString,
            clusterfuzz_dot___internal_dot_protos_dot_swarming__pb2.ClientPermissions.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
